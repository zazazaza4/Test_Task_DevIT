/* Напишіть функцію combos, яка приймає ціле позитивне число num і повертає масив масивів позитивних цілих чисел,
де сума кожного масиву дорівнює num. Масиви не повинні повторюватися. */

const combos = (num: number): number[][] => {
  // Початковий масив
  const result: number[][] = [[num]];

  // Рекурсивна функція для генерації результату.
  function recurse(n: number, curr: number[], startFrom: number): void {
    // Якщо n дорівнює 0, то отримана комбінація відповідає сумі числа num, і ми додаємо її до результату.
    if (n === 0) {
      result.push([...curr]);
      return;
    } else if (n > 0) {
      // Перебираємо всі можливі числа, з яких можемо формувати комбінацію.
      for (let i = startFrom; i < num; i++) {
        curr.push(i);
        // Рекурсивно викликаємо функцію для знаходження комбінацій зі значенням n - i.
        recurse(n - i, curr, i);
        curr.pop(); // Після завершення рекурсивного виклику видаляємо останнє додане число.
      }
    }
  }

  // Повертаємо результат
  recurse(num, [], 1);
  return result;
};

combos(5);
/*
Output: 
[
  [ 5 ],
  [ 1, 1, 1, 1, 1 ],
  [ 1, 1, 1, 2 ],
  [ 1, 1, 3 ],
  [ 1, 2, 2 ],
  [ 1, 4 ],
  [ 2, 3 ]
]
*/

combos(3);
/* Output: 
[[3], [1, 1, 1], [1, 2]];
*/
combos(10);
/* Output: 
[ 
  [ 10 ],
  [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 1, 1, 1, 1, 1, 1, 1, 1, 2 ],
  [ 1, 1, 1, 1, 1, 1, 1, 3 ],
  [ 1, 1, 1, 1, 1, 1, 4 ],
  [ 1, 1, 1, 1, 1, 5 ],
  [ 1, 1, 1, 1, 6 ],
  [ 1, 1, 1, 7 ],
  [ 1, 1, 8 ],
  [ 1, 9 ],
  [ 1, 1, 1, 1, 1, 1, 2, 2 ],
  [ 1, 1, 1, 1, 1, 2, 3 ],
  [ 1, 1, 1, 1, 2, 4 ],
  [ 1, 1, 1, 1, 2, 2, 2 ],
  [ 1, 1, 1, 1, 3, 3 ],
  [ 1, 1, 1, 2, 5 ],
  [ 1, 1, 1, 2, 2, 3 ],
  [ 1, 1, 1, 3, 4 ],
  [ 1, 1, 2, 6 ],
  [ 1, 1, 2, 2, 4 ],
  [ 1, 1, 2, 2, 2, 2 ],
  [ 1, 1, 2, 3, 3 ],
  [ 1, 1, 3, 5 ],
  [ 1, 1, 4, 4 ],
  [ 1, 2, 7 ],
  [ 1, 2, 2, 5 ],
  [ 1, 2, 2, 2, 3 ],
  [ 1, 2, 3, 4 ],
  [ 1, 3, 6 ],
  [ 1, 3, 3, 3 ],
  [ 1, 4, 5 ],
  [ 2, 8 ],
  [ 2, 2, 6 ],
  [ 2, 2, 2, 4 ],
  [ 2, 2, 2, 2, 2 ],
  [ 2, 2, 3, 3 ],
  [ 2, 3, 5 ],
  [ 2, 4, 4 ],
  [ 3, 7 ],
  [ 3, 3, 4 ],
  [ 4, 6 ],
  [ 5, 5 ]
] */
